const{isArray:aB}=Array;(()=>{const f=function(){},b=typeof (Buffer)==='function'?Buffer:f,c=typeof (Blob)==='function'?Blob:f,d=typeof (DataView)==='function'?DataView:f,e=new Set([ArrayBuffer,BigInt,c,Boolean,b,d,Date,Error,Int8Array,Int16Array,Int32Array,Map,Number,RegExp,Set,String,Uint8Array,Uint16Array,Uint32Array]),a=new Set([Boolean,Error,Number,Promise,String,Symbol,WeakMap,WeakSet]),g=(A,_={},B=new WeakMap())=>{const D=typeof (A),{nonStandard:E,nonEnumerable:F}=_;if(!A||D!=='object'||a.has(A.constructor)||D==='function'||D==='undefined'){(A&&D==='object')&&B.set(A,A);return A}let G=B.get(A);if(G)return G;if(e.has(A.constructor)){G=A instanceof b?b.from(A):A instanceof ArrayBuffer?A.slice(0):A instanceof c?new c([A], {type:A.type,endings:A.endings}):A instanceof d?new d(g(A.buffer,_,B), A.byteOffset, A.byteLength):new A.constructor(A);B.set(A,G);if(G instanceof Set||G instanceof Map)for(const[C,_b] of G.entries())if(G instanceof Set){G.delete(C);G.add(g(C,_,B))}else G instanceof Map&&(G.delete(C),G.set(g(C,_,B),g(_b,_,B)));if(E)for(const _a in A)isNaN(parseInt(_a))&&(G[_a]=A[_a])}else if(aB(A)&&!E)G=A.map(_A=>g(_A,_,B));else{if(A.constructor.from&&!aB(A))try{G=A.constructor.from(A);return G}catch(aA){}G=aB(A)?new A.constructor():Object.create(Object.getPrototypeOf(A));B.set(A,G);for(const key in A){var h=A[key];G[key]=g(h,_,B)}}return G};typeof (module)!=='undefined'&&(module.exports=g,g.nanoCopy=g);typeof (globalThis)!=='undefined'&&(globalThis.nanoCopy=g)})();
